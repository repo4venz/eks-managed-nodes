 # Configure node-exporter for worker nodes

serviceAccounts:
  server:
    name: ${service_account_name}
    annotations:
      eks.amazonaws.com/role-arn: ${prometheus_role_arn}
      eks.amazonaws.com/sts-regional-endpoints: "true"  # Use regional STS endpoints for better performance

prometheus-node-exporter:
  enabled: true
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:  # Hard requirement
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/os  # Only Linux nodes
            operator: In
            values: [linux]
          - key: kubernetes.io/os 
            operator: Exists  # Any node with this label
          - key: kubernetes.io/arch
            operator: In
            values: [amd64, arm64]  # Support both amd64 and arm64 architectures
          - key: nvidia.com/gpu
            operator: Exists
  hostRootFs:
    enabled: true  # Enable host root filesystem metrics (exposes disk usage, inode stats, etc.; ensure only trusted users can access these metrics to avoid leaking node-level information)
  tolerations:
    - operator: Exists  # Tolerate all taints
    - key: "eks.amazonaws.com/capacity-type"
      operator: "Equal"
      value: "spot"
      effect: "NoSchedule"
    - key: nvidia.com/gpu
      operator: Exists

# Configure Prometheus and Grafana
# This section configures Prometheus and Grafana for monitoring and visualization
prometheus:
  prometheusSpec:
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ${storage_class_name} #ebs-sc
          accessModes:  ["ReadWriteMany"] # ["ReadWriteOnce"]    # for EBS use ReadWriteOnce and for EFS use ReadWriteMany
          resources:
            requests:
              storage: ${storage_size}
    podMetadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}  # Selects all ServiceMonitors
    serviceMonitorNamespaceSelector: {}  # Looks in all namespaces
    podMonitorSelector: {}  # Selects all PodMonitors
    podMonitorNamespaceSelector: {}  # Looks in all namespaces
    scrapeInterval: 30s
    evaluationInterval: 30s
    ruleSelectorNilUsesHelmValues: false
    resources:
      requests:
        memory: 2Gi
        cpu: 1
    retention: ${prometheus_retention}  # 15d
    retentionSize: 5GiB
    additionalScrapeConfigs:
      - job_name: 'kubernetes-nodes'
        static_configs:
          - targets: ['localhost:9100']

      - job_name: 'kubelet'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: (.+):(?:\d+);(\d+)
            replacement: $1:$2
            target_label: __address__

      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
        - role: service
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)



  # Enable Grafana
grafana:
  enabled: true
  namespace: ${k8s_namespace}  # Default namespace for Grafana

  initChownData:
    enabled: false  # Disable permission change init container (used for EFS)

  adminUser: admin  # Default admin user
  adminPassword: admin123  # CHANGE THIS in production

  persistence:
    enabled: true
    storageClassName: ${storage_class_name}  # e.g., ebs-sc or efs-sc
    accessModes: ["ReadWriteMany"]  # EFS: ReadWriteMany, EBS: ReadWriteOnce
    size: ${storage_size}  # e.g., 5Gi

  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - ${grafana_ingress_hostname}  # Your domain
    path: /
    pathType: Prefix
    tls:
      - secretName: grafana-tls
        hosts:
          - ${grafana_ingress_hostname}
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/proxy-body-size: 100m
      external-dns.alpha.kubernetes.io/hostname: ${grafana_ingress_hostname}
      cert-manager.io/cluster-issuer: letsencrypt-${environment}
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
      nginx.ingress.kubernetes.io/client-body-buffer-size: "8k"

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Loki
          type: loki
          access: proxy
          url: http://loki-gateway.${k8s_namespace}.svc.cluster.local
          jsonData:
            maxLines: 1000
            timeInterval: "5s"
            tlsSkipVerify: true
          isDefault: false

        - name: Kubernetes
          type: prometheus
          access: proxy
          url: http://kube-state-metrics.${k8s_namespace}.svc.cluster.local:8080
          jsonData:
            timeInterval: "5s"
            tlsSkipVerify: true
          isDefault: false

alertmanager:
  enabled: true
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: ${storage_class_name}
          accessModes: ["ReadWriteMany"]  # Use ReadWriteOnce for EBS
          resources:
            requests:
              storage: 2Gi
