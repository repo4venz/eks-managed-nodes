name: "Terraform Plan All (Infra, Post-Build and Application) Workflow"
on:
  workflow_dispatch:  # Manual trigger via GitHub UI

jobs:
  terraform-infra:
    name:   ${{matrix.runner}} - ${{matrix.environment }} - Infra Deploy
    runs-on: [ '${{ matrix.runner }}']
    strategy:
      max-parallel: 1
      matrix:
         include:
           - environment: dev
             runner: ubuntu-latest
    env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout Code 
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        id: install

      - name: Read EKS cluster name from config yaml action
        id: yaml
        uses: actions-tools/yaml-outputs@v2     
        with:
          file-path: './workflow-config/github-workflow-config.yaml'          # File to read from
      
      - name: Display Config values from YAML
        id: display-yaml
        run: |
          echo "Environment Name: ${{ steps.yaml.outputs.EKSConfig__envName }}"
          echo "EKS cluster Name: ${{ steps.yaml.outputs.EKSConfig__clusterName }}"
          echo "EKS Cluster Region: ${{ steps.yaml.outputs.EKSConfig__clusterRegion }}" 
          echo "S3 Bucket Name - TF State: ${{ steps.yaml.outputs.TerraformConfig__s3NameTFstate }}" 
          echo "Setting Env variable with EKS cluster name...."
          echo "AWS_EKS_CLUSTER_NAME=$(echo "${{ steps.yaml.outputs.EKSConfig__clusterName }}")" >> $GITHUB_ENV
          echo "Setting Env variable with EKS cluster AWS Region...."
          echo "AWS_DEFAULT_REGION=$(echo "${{ steps.yaml.outputs.EKSConfig__clusterRegion }}")" >> $GITHUB_ENV
          echo "Setting Env variable with S3 Bucket Name for TF State...."
          echo "S3_NAME_TF_STATE=$(echo "${{ steps.yaml.outputs.TerraformConfig__s3NameTFstate }}")" >> $GITHUB_ENV


      - name: Checking the GitHub Env variable values
        id: Test-Cluster-name-Env-Var
        run: |
          echo "AWS_EKS_CLUSTER_NAME: ${AWS_EKS_CLUSTER_NAME}" 
          echo "AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}"
          echo "S3_NAME_TF_STATE: ${S3_NAME_TF_STATE}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: Verify AWS credentials
        run: aws sts get-caller-identity

      - name: Make the shell script files executable
        run: chmod +x ./workflow-config/s3-bucket-tfstate.sh
      - name: Run the tfstate S3 bucket creation scripts 
        run: |
          ./workflow-config/s3-bucket-tfstate.sh ${S3_NAME_TF_STATE} ${AWS_DEFAULT_REGION}

      - name: EKS cluster Kubectl Config update
        run: |
            echo "Creating Kubectl folder structure and file...."
            mkdir /home/runner/.kube/
            touch /home/runner/.kube/config
            chmod -R 777 /home/runner/.kube/
            echo "Finding existing EKS cluster...." 
            VAR_EKS_CLUSTER_NAME=$(aws eks list-clusters --region ${AWS_DEFAULT_REGION} --query clusters[0] --output text)
            echo "EKS Cluster found: "$VAR_EKS_CLUSTER_NAME
            if [ "$AWS_EKS_CLUSTER_NAME" == "$VAR_EKS_CLUSTER_NAME" ];
            then
             echo "EKS cluster found and setting Kubectl config...." 
             aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name ${AWS_EKS_CLUSTER_NAME}
            else
              echo "EKS Cluster: ${AWS_EKS_CLUSTER_NAME} is not present in ${AWS_DEFAULT_REGION}"
            fi
            cat /home/runner/.kube/config      
      
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Format Terraform (Infra Only)
        run: terraform -chdir=infra fmt

      - name: Terraform Init (Infra Only)
        id: init_infra
        run: |
           rm -rf .terraform
           terraform -chdir=infra init -upgrade

      - name: Terraform Validate (Infra Only)
        run: terraform -chdir=infra validate

      - name: Terraform Plan (Infra only)
        if: "!contains(github.event.head_commit.message, 'destroy')"
        id: plan_infra
        run: TF_LOG=DEBUG terraform -chdir=infra plan -input=false -var-file=$(pwd)/${{ matrix.environment }}/terraform.tfvars -no-color
 
      - name: Format Terraform (Post Build Only)
        run: terraform -chdir=post-build fmt

      - name: Terraform Init (Post Build Only)
        id: init_post_build
        run: |
           rm -rf .terraform
           terraform -chdir=post-build init -upgrade

      - name: Terraform Validate (Post Build Only)
        run: terraform -chdir=post-build validate

      - name: Terraform Plan (Post Build Only)
        if: "!contains(github.event.head_commit.message, 'destroy')"
        id: plan_post_build
        run: TF_LOG=DEBUG terraform -chdir=post-build plan -input=false -var-file=$(pwd)/${{ matrix.environment }}/terraform.tfvars -no-color
 

      - name: Format Terraform (Application Only)
        run: terraform -chdir=application-build fmt

      - name: Terraform Init (Application Only)
        id: init_application
        run: |
           rm -rf .terraform
           terraform -chdir=application-build init -upgrade

      - name: Terraform Validate  (Application Only)
        run: terraform -chdir=application-build validate

      - name: Terraform Plan (Application only)
        if: "!contains(github.event.head_commit.message, 'destroy')"
        id: plan_application
        run: TF_LOG=DEBUG terraform -chdir=application-build plan -input=false -var-file=$(pwd)/${{ matrix.environment }}/terraform.tfvars -no-color


  comment:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Thanks for reporting!'
            })

